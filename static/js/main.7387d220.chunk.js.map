{"version":3,"sources":["Components/PortfolioCard.js","Containers/Home.js","Themes/Colors.js","App.js","serviceWorker.js","index.js","Images/profile.jpg","logo.svg"],"names":["withStyles","card","maxWidth","media","height","props","classes","console","log","react_default","a","createElement","Card_default","className","style","margin","alignSelf","CardActionArea_default","CardMedia_default","image","title","CardContent_default","Typography_default","gutterBottom","variant","component","CardActions_default","Button_default","size","color","Home","Container","fluid","Row","Col","md","src","require","href","class","theme","createMuiTheme","palette","type","background","App","styles","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oUAyDeA,qBA9CA,CACXC,KAAM,CACFC,SAAU,KAEdC,MAAO,CACHC,OAAQ,MAyCDJ,CArCf,SAAuBK,GAAO,IAClBC,EAAYD,EAAZC,QAER,OADAC,QAAQC,IAAIH,GAERI,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,UAAWP,EAAQL,KAAMa,MAAO,CAClCC,OAAQ,OACRC,UAAW,SAEXP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,KACID,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CACIG,UAAWP,EAAQH,MACnBgB,MAAOd,EAAMc,MACbC,MAAM,0BAEVX,EAAAC,EAAAC,cAACU,EAAAX,EAAD,KACID,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAYa,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAhD,UAGAhB,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAYe,UAAU,KAAtB,mIAMRhB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,KACID,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAQkB,KAAK,QAAQC,MAAM,WAA3B,kBCvCD,SAASC,IACpB,OACIrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAWC,OAAK,GAEZvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAKpB,UAAU,YACXJ,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAKC,GAAG,IAAItB,UAAU,qDAClBJ,EAAAC,EAAAC,cAAA,OACIE,UAAU,cACVuB,IAAKC,EAAQ,OAGrB5B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAKC,GAAG,KAEJ1B,EAAAC,EAAAC,cAAA,MAAIE,UAAU,8BAAd,mBACAJ,EAAAC,EAAAC,cAAA,oSAKAF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,mBAAd,YACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sDACXJ,EAAAC,EAAAC,cAAA,KAAG2B,KAAK,kCACJ7B,EAAAC,EAAAC,cAAA,KAAG4B,MAAM,yBAGb9B,EAAAC,EAAAC,cAAA,KAAG2B,KAAK,4CACJ7B,EAAAC,EAAAC,cAAA,KAAG4B,MAAM,2BAEb9B,EAAAC,EAAAC,cAAA,KAAG2B,KAAK,gCACJ7B,EAAAC,EAAAC,cAAA,KAAG4B,MAAM,8BCpC1B,ICOTC,EAAQC,yBAAe,CAC3BC,QAAS,CACPC,KAAM,OACNC,WDTY,aCqBDC,MARf,WACE,OACEpC,EAAAC,EAAAC,cAACmC,EAAA,iBAAD,CAAkBN,MAAOA,GACvB/B,EAAAC,EAAAC,cAACmB,EAAD,QCLciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,kHCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.7387d220.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n    card: {\n        maxWidth: 345,\n    },\n    media: {\n        height: 140,\n    },\n};\n\nfunction PortfolioCard(props) {\n    const { classes } = props;\n    console.log(props)\n    return (\n        <Card className={classes.card} style={{\n            margin: '10px',\n            alignSelf: 'left'\n        }}>\n            <CardActionArea>\n                <CardMedia\n                    className={classes.media}\n                    image={props.image}\n                    title=\"Contemplative Reptile\"\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        Lizard\n          </Typography>\n                    <Typography component=\"p\">\n                        Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\n                        across all continents except Antarctica\n          </Typography>\n                </CardContent>\n            </CardActionArea>\n            <CardActions>\n                <Button size=\"small\" color=\"primary\">\n                    Learn More\n        </Button>\n            </CardActions>\n        </Card>\n    );\n}\n\nPortfolioCard.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(PortfolioCard);\n","import React from 'react'\nimport './Style/HomeStyle.css'\nimport { Container, Row, Col } from 'reactstrap'\nimport CircleImage from '../Components/CircleImage'\nimport PortfolioCard from '../Components/PortfolioCard'\n\nexport default function Home() {\n    return (\n        <Container fluid>\n\n            <Row className='main-row'>\n                <Col md='4' className=' d-flex justify-content-center align-items-center'>\n                    <img\n                        className='profile-pic'\n                        src={require('../Images/profile.jpg')} />\n                </Col>\n\n                <Col md='8'>\n\n                    <h1 className='font-effect-anaglyph title'>Sidhanth Surana</h1>\n                    <p>A Full Stack Javascript web and mobile developer fueled purely by pizzas. A polyglot programmer\n                         who loves tinkering and exploring new libraries , frameworks and languages. Core believer\n                         of hardwork beating talent. Currently enjoying the MERN stack and GraphQL schematic for APIs.\n                    </p>\n\n                    <div >\n                        <h1 className='title mt-4 mb-3'>Connect </h1>\n                        <div className='d-flex flex-row justify-content-between second-div'>\n                            <a href='https://github.com/Sidhanthsur'>\n                                <i class=\"fab fa-github fa-3x\"></i>\n                            </a>\n\n                            <a href='https://www.linkedin.com/in/sidhanthsur/'>\n                                <i class=\"fab fa-linkedin fa-3x\"></i>\n                            </a>\n                            <a href='https://medium.com/@sidhanth'>\n                                <i class=\"fab fa-medium fa-3x\"></i>\n                            </a>\n                        </div>\n                    </div>\n                </Col>\n\n            </Row>\n\n        </Container>\n    )\n}","export default {\n    background: '#474747',\n    light: '#666666',\n    dark: '#191919'\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './Containers/Home'\nimport color from './Themes/Colors'\nimport { createMuiTheme, MuiThemeProvider, } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    background: color.background\n  },\n});\n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <Home />\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profile.5d0b4d45.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}